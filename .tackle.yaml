
<-:
  help: Generate scaffolding for an ICON smart contract

  exec:
    warning:
      ->: confirm
      message: |
        WARNING: This is very much a WIP project. Features such as "burnable", 
        "mintable", etc have not been implemented yet. It simply uses the contracts 
        from the sample contracts repo. Later version will use contracts from 
        https://github.com/TechFlow-Space/icon-smart-contract-deployer but these still 
        need to be templated and have the actual features implemented. It is advised 
        to wait till then before really using this tool. 

    is_token->: confirm Is this a token / NFT?
    token_standard->: select --choices ['irc2','irc3','irc31'] --if is_token --else contract
    contract_class->: literal token --if is_token --else contract # For differentiating between tokens and contracts
    contract_type->: var token_standard --if is_token --else contract

    contract_name->: input What is the {{contract_class}} name? --default "Big Deal {{contract_class.title()}}"
    project_slug->: var contract_name|replace(' ','_')|replace('-','_')|replace('.','_')|trim()
    contract_slug->: var project_slug|replace('_','')

    features:
      ->: match token_standard --merge
      case:
        irc2:
          mintable->: confirm
          burnable->: confirm
          pausable->: confirm
          permit->: confirm
          votes->: confirm
          flash_minting->: confirm
          snapshots->: confirm
        irc3:
          mintable->: confirm
          auto_increment_ids->: confirm --if mintable --else false
          burnable->: confirm
          pausable->: confirm
          votes->: confirm
          enumerable->: confirm
          uri_storage->: confirm
        irc31:
          mintable->: confirm
          auto_increment_ids->: confirm --if mintable --else false
          burnable->: confirm
          pausable->: confirm
          votes->: confirm
          enumerable->: confirm
          uri_storage->: confirm
        contract:
          pausable->: confirm

    # Create a license file
    license->: tackle robcxyz/tackle-license --output {{project_slug}}

    # Generate the code
    ci_enable->: confirm Do you want to generate CI
    gen ci_>: generate templates/.github {{project_slug}}/.github --if ci_enable
    gen boilerplate_>: generate templates/boilerplate {{project_slug}}
    gen token:
      _>: match contract_type
      case:
        contract->: generate templates/contract {{project_slug}}
        irc2->: generate templates/irc2 {{project_slug}}
        irc3->: generate templates/irc3 {{project_slug}}
        irc31->: generate templates/irc31 {{project_slug}}

test<-:
  help: Run the tests
  exec:
    info->: print Running tests
