<-:
  help: Generate scaffolding for an ICON smart contract
  exec:
    # A warning -> to be removed
    warning:
      ->: confirm
      message: |
        WARNING: This is very much a WIP project. Features such as "burnable", 
        "mintable", etc have not been implemented yet. It simply uses the contracts 
        from the sample contracts repo. Later version will use contracts from 
        https://github.com/TechFlow-Space/icon-smart-contract-deployer but these still 
        need to be templated and have the actual features implemented. It is advised 
        to wait till then before really using this tool. 

    is_token->: confirm Is this a token / NFT?
    contract_standard:
      ->: select What standard do you want to build on? --if is_token --else contract
      choices:
        - IRC2 Fungible Token: irc2
        - IRC3 Non-Fungible Token: irc3
        - IRC31 Non-Fungible Token: irc31

    # For differentiating between tokens and contracts
    contract_class->: literal token --if is_token --else contract
    contract_name->: input What is the {{contract_class}} name? --default "Big Deal {{contract_class.title()}}"
    project_slug->: var contract_name|replace(' ','_')|replace('-','_')|replace('.','_')|trim()
    contract_slug->: var project_slug|replace('_','')

    prompts:
      _>: var
      input:
        # Follow up with permissions - ie multi-sig for minting or some contract functionality.
        mintable: Is this token mintable?
        auto_increment_ids: Do you want the token IDs to auto-increment?
        # Followup?
        burnable: Is this token burnable?
        # Should pausable have additional prompts such as who is able to pause it or just assume owner?
        # Perhaps a followup prompt should ask if pausing permissions should be a multi-sig and implement that.
        pausable: Is this {{contract_class}} pausable?
        # ?
        permit: Is this token permissioned?
        # Can contracts have voting?
        votes: Will there be voting enabled for this token?
        flash_minting: Will there be flash minting enabled for this token?
        # Can contracts be snapshotted -> perhaps some state that is specified?
        snapshots: Will there be snapshotting of this token?
        # ?
        enumerable: Is this token enumerable?
        # ?
        uri_storage: |
          Will the storage be based on some kind URI? eg ?

    features:
      ->: match contract_standard
      case:
        irc2:
          mintable->: confirm {{prompts.mintable}}
          burnable->: confirm {{prompts.burnable}}
          pausable->: confirm {{prompts.pausable}}
          permit->: confirm {{prompts.permit}}
          votes->: confirm {{prompts.votes}}
          flash_minting->: confirm {{prompts.flash_minting}}
          snapshots->: confirm {{prompts.snapshots}}
        irc3:
          mintable->: confirm {{prompts.mintable}}
          auto_increment_ids->: confirm --if mintable --else false {{prompts.auto_increment_ids}}
          burnable->: confirm {{prompts.burnable}}
          pausable->: confirm {{prompts.pausable}}
          votes->: confirm {{prompts.votes}}
          enumerable->: confirm {{prompts.enumerable}}
          uri_storage->: confirm {{prompts.uri_storage}}
        irc31:
          mintable->: confirm {{prompts.mintable}}
          auto_increment_ids->: confirm --if mintable --else false  {{prompts.auto_increment_ids}}
          burnable->: confirm {{prompts.burnable}}
          pausable->: confirm {{prompts.pausable}}
          votes->: confirm {{prompts.votes}}
          enumerable->: confirm {{prompts.enumerable}}
          uri_storage->: confirm {{prompts.uri_storage}}
        contract:
          pausable->: confirm {{prompts.pausable}}

    # In order to properly test the file, we need to merge these values separately. This
    # is because the whole `features` key is overriden. Current tackle does not support
    # overriding keys within
    merge features->: var {{features}} --merge

    # Create a license file
#    license->: tackle robcxyz/tackle-license --output {{project_slug}}

    # Generate the code
    ci_enable->: confirm Do you want to generate CI
    gen ci_>: generate templates/.github {{project_slug}}/.github --if ci_enable
    gen boilerplate_>: generate templates/boilerplate {{project_slug}}
#    d->: debug
    gen contract_>: generate templates/{{contract_standard}} {{project_slug}}

    make gradlew executable_>: chmod {{path_join([project_slug,'gradlew'])}} "0o775"

    # TODO: Add drogon
    compile_contract->: confirm Do you want to compile the {{contract_class}}?
    run tests:
      ->: command "./gradlew build"
      chdir: {{project_slug}}
      if: compile_contract

test<-:
  help: Run the tests
  exec:
    info->: print Running tests
